[{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1567641600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/nelson-bighetti/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/nelson-bighetti/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Nelson Bighetti","type":"authors"},{"authors":["吳恩達"],"categories":null,"content":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":1461110400,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1555459200,"objectID":"da99cb196019cc5857b9b3e950397ca9","permalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"吳恩達","type":"authors"},{"authors":null,"categories":null,"content":" Each class session has a set of required readings that you should complete before watching the lecture or working through the lesson.\nEvery class session also has a YouTube playlist of short recorded videos for each of the lecture sections. On each class session page you’ll buttons for opening the presentation in a new tab or for downloading a PDF of the slides in case you want to print them or store them on your computer:\n View all slides in new window  Download PDF of all slides The slides are also embedded on each page. You can click in the slides and navigate through them with ← and →. If you type ? (or shift + /) while viewing the slides you can see a list of slide-specific commands.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"85e74472768c621ca94af057441bdf7f","permalink":"/lectures/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/","section":"lectures","summary":"Each class session has a set of required readings that you should complete before watching the lecture or working through the lesson.\nEvery class session also has a YouTube playlist of short recorded videos for each of the lecture sections.","tags":null,"title":"Lectures and videos","type":"docs"},{"authors":null,"categories":null,"content":" Each class session has an interactive practice that you will work through after doing the readings and watching the lecture.\nInteractive code sections look like this. Make changes in the text box and click on the green “Run Code” button to see the results. Sometimes there will be a button with a hint or solution.\nYour turn: Modify the code here to show the relationship between health and wealth for 2002 instead of 2007.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"7f4e0723807d0b83adaddecf67df2c85","permalink":"/practice/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/practice/","section":"practice","summary":"Each class session has an interactive practice that you will work through after doing the readings and watching the lecture.\nInteractive code sections look like this. Make changes in the text box and click on the green “Run Code” button to see the results.","tags":null,"title":"Practice Problems","type":"docs"},{"authors":null,"categories":null,"content":"  Visualizing Star Wars Practice with Objects The whole point of making an object is that you can do things with them!  Practice with Vectors   Visualizing Star Wars Now that you’re oriented to RStudio, it’s time to write and execute some code. The following uses a data set about Star Wars characters (yay!). This is the same dataset as the Objects lecture\nYou try:\nRead through the lines of code. You probably won’t understand anything, but that’s OK! Click “Run Code” Watch what happens!    Over the course of this basic training, we’ll cover all the elements in this code block that produced this graph. It’s 100% OK if it looks like complete gibberish to you right now!\n Practice with Objects  Objects allow you to store things (values, models, entire datasets etc.) They are the nouns of programming languages; they are typically what we are acting on We give an object a name; this is called assignment, and it takes the form of:  nameOfMyObject  objectToStore The thing on the LEFT is the name you want to give your object.\nThen the arrow; first \u0026lt; (less than sign), then - (hyphen/dash) with no space in between.\nThe thing you want to actually store for later goes on the RIGHT.\nYou try! Create an object called continents that stores the number 7\n Note:\n Make sure you hit “Run Code” before “Submit Answer” If you get a message that’s something like “Last value is invisible”, you can ignore it    Things to note: If you were to run this line of code from within RStudio, you would see the word continents in the Environment pane (upper right side). This is an easy way for you to glance over and see if your object is actually stored.\n Notice that nothing printed out when you ran the code above. That code simply says “store the number 7 in an object called continents”. No where does it say \u0026quot;show me what is stored in the continents object. To do that, you simply need to type it out again, like this:\n  continents \u0026lt;- 7 continents ## [1] 7 ☝️ The second line prints out continents, so the number 7 appears.\nIn your research, most of the time, you don’t necessarily want to print out every object. But it’s very helpful for things like homework assignments or showing your collaborators an answer/value.\nQuick Quiz\n   The whole point of making an object is that you can do things with them! For example:\n# I have 5 chickens chickens \u0026lt;- 5 # I have 4 cows cows \u0026lt;- 4 # How many animals do I have in total? chickens + cows ## [1] 9 You can also update your objects!\n# I sold 3 chickens chickens \u0026lt;- chickens - 3 # I bought 8 cows cows \u0026lt;- cows + 8 # What is my new total number of animals? # Still the same line of code from before! chickens + cows ## [1] 14 In this scenario, we did an “overwrite” of our original chickens and cows objects. We could have stored those as new objects. Something like: chickens_new \u0026lt;- chickens - 3. You will need to decide whether it makes sense to overwrite an object or to create a new one. Base it on what you’re trying to accomplish.\nQuick Quiz\n    Practice with Vectors A vector is a group of objects that’s 1-dimensional:\n It can be a row, a column, or just stand alone To make a vector, you can combine or concatenate objects together using c() Each object (vector or otherwise) has a specific data class. this can be things like numeric, character, factors, logical etc.  Check out this table:\n  ID State Smoker Age    ID1 Missouri TRUE 20  ID2 Iowa FALSE 18  ID3 Missouri FALSE 32  ID4 Idaho TRUE 25  ID5 Maine FALSE 25    Here, each row can be considered it’s own vector, and each column can be considered it’s own vector.\nYou try:\nFirst, create 4 vectors for each of these columns. Make sure they contain the same exact values as what you see in this table! Assign each vector to the following corresponding name:   ids state smoker age  Then, check the class() of each of your newly created vectors.    Remember Star Wars? You’ve already made a factor! You turned species into a factor. The result is that in our graph, we have discrete categories for the different types of Star Wars characters!\nempire empire$species ggplot(data = empire, aes(x = mass, y = height)) +\n\u0026nbsp;\u0026nbsp;geom_point(aes(size = mass,\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;color = species),\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;alpha = .5) +\n\u0026nbsp;\u0026nbsp;labs(title = \"Star Wars Characters\",\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;subtitle = \"by size\",\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;x = \"Weight (kg)\",\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;y = \"Height (cm)\") +\n\u0026nbsp;\u0026nbsp;scale_size(guide = \"none\")   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"82a1f689a043b2c6844afd564f071d1f","permalink":"/practice/02-practice/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/practice/02-practice/","section":"practice","summary":"Visualizing Star Wars Practice with Objects The whole point of making an object is that you can do things with them!  Practice with Vectors   Visualizing Star Wars Now that you’re oriented to RStudio, it’s time to write and execute some code.","tags":null,"title":"Practice Set: Objects","type":"docs"},{"authors":null,"categories":null,"content":"  Vectors Recap Indexing   Vectors Recap Before diving into indexing, let’s make sure we’re 💯 good with vectors. In the previous practice set, you created the following 4 vectors:\nids \u0026lt;- c(\u0026quot;ID1\u0026quot;, \u0026quot;ID2\u0026quot;, \u0026quot;ID3\u0026quot;, \u0026quot;ID4\u0026quot;, \u0026quot;ID5\u0026quot;) # character state \u0026lt;- c(\u0026quot;Missouri\u0026quot;, \u0026quot;Iowa\u0026quot;, \u0026quot;Missouri\u0026quot;, \u0026quot;Idaho\u0026quot;, \u0026quot;Maine\u0026quot;) # character/factor smoker \u0026lt;- c(TRUE, FALSE, FALSE, TRUE, FALSE) # logical age \u0026lt;- c(20, 18, 32, 25, 25) # numeric You can do something to all elements of the vector:\n# add 10 years to everyone\u0026#39;s age age \u0026lt;- age + 10 age ## [1] 30 28 42 35 35 If you have 2 vectors, these can be combined in a number of ways!\nLet’s try to add the number 2 to the first person’s age, 4, to the second person’s age etc.\nnumbers \u0026lt;- c(2, 4, 6, 8, 10) age + numbers ## [1] 32 32 48 43 45 You can also append one vector on to the next. Notice that to do this, we use c(). We’re concatenating or combining the two vectors.\nnewVector \u0026lt;- c(age, numbers) newVector ## [1] 30 28 42 35 35 2 4 6 8 10 If you have 2 vectors, but they are not the same length, R will recycle the shorter vector.\nshortVector \u0026lt;- c(1000, 2000) newVector + shortVector ## [1] 1030 2028 1042 2035 1035 2002 1004 2006 1008 2010 If the longer vector is not a multiple of the shorter vector, the process still works but you’ll also get a warning message (notice how it still works, though):\nage + shortVector ## Warning in age + shortVector: longer object length is not a multiple of shorter ## object length ## [1] 1030 2028 1042 2035 1035 You try! The following exercises are a modified version of the sat.act dataset (but broken up into vectors). The SAT \u0026amp; ACT are both standardized college admissions tests in the United States. The ACT technically has 4 parts, but only the overall score is reported here. The SAT is broken up into verbal and quantitative categories:\n age in years act contains scores from the ACT tests; range 1-36, norm ~20 satv contains the Verbal scores from the SAT; range 200-800, avg ~500 satq contains the quantitative scores from the SAT; range 200-800, avg ~500  Follow the directions above each code chunk!\n   Indexing Nice work! Let’s move on to practicing indexing, specifically with 1-dimensional vectors.\nThink of the index as an address, and your entire vector as a street. Where on the street is the particular object you’re looking for? We want to use that object’s address to find it. To do so, we use the following format:\nVECTOR[index] For example, if I wanted to get the 4th item in the state vector, it would look something like this:\nstate[4]  ## [1] \u0026quot;Idaho\u0026quot;  To check out more than 1 index:\n If the indices you want are in a row:  Use the colon : to get items # through # Ex: 3:5 reads as “items 3 through 5”  If they are NOT in a row:  Make a mini vector with c() Ex: c(1, 4, 18) reads as “items 1, 4, and 18”   You try! Practice indexing on the same sat.act variables from above, including the variables you created! Follow the directions above each code chunk.\n  A Demonstration Let’s say we wanted to find the act scores of everyone that was over the age of 35. The line of code below finds out who is over 35 years old, and stores it as it’s own vector called older. Let’s take a look:\n# find people over 35 yrs old older \u0026lt;- which(age \u0026gt; 35) older ## [1] 10 14 20 21 24 28 35 37 38 43 45 61 62 74 80 81 85 87 90 98 Look at the numbers that printed out. They are not the actual ages! We know this because we asked for people over 35 years old, and there are lots of numbers under 35 here. Our vector older now contains the indices of people over the age of 35!\nThe first item in older…\nolder[1] ## [1] 10 …corresponds to an index in the age vector of someone over the age of 35. Let’s look at the first 15 people in the age vector.\nage[1:15] ## [1] 19 23 20 27 33 26 30 19 23 40 23 34 32 41 20 Notice that the first person over 35 is the 10th person. They are 40 years old. That is why the first number in older is “10”. It’s not the actual age of 40…it’s the “address” of the 40 year old within the age vector; it’s the index!\nWe can use this to our advantage! We wanted to find the act scores of everyone over 35 yrs old. Now that we have our older vector, we don’t need to manually type out the indices!\nactOldScores \u0026lt;- act[older] actOldScores ## [1] 35 35 32 28 30 21 33 28 24 30 36 34 32 32 21 26 28 24 30 33 To verify, we said that the 1st person over the age of 35 was at index #10. Let’s look at the act score for index #10\nact[10] ## [1] 35 That number (which happens to be 35!) matches the very first number in the actOldScores vector. Our code worked! actOldScores represents all the act scores of people over the age of 35.\nFYI: R is kind of weird in that it starts indexing at 1. You should know that most other programming languages begin indexing at 0. R and MATLAB are the only languages I’m aware of that begin at 1. Normally, the first element in the vector has an index of 0. If you plan on also using other programming languages, like python 🐍, then this is something to be aware of.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d19cb388740e38652aaf1c2254474a3f","permalink":"/practice/03-practice/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/practice/03-practice/","section":"practice","summary":"Vectors Recap Indexing   Vectors Recap Before diving into indexing, let’s make sure we’re 💯 good with vectors. In the previous practice set, you created the following 4 vectors:","tags":null,"title":"Practice Set: Indexing","type":"docs"},{"authors":null,"categories":null,"content":"  Data.frames Indexing Data.frames   Data.frames A data.frame is basically a spreadsheet. It’s 2-dimensional (rows \u0026amp; columns). Remember our starwars dataset?\n   name  height  mass  sex  homeworld  species      Luke Skywalker  172  77.0  male  Tatooine  Human    C-3PO  167  75.0  none  Tatooine  Droid    R2-D2  96  32.0  none  Naboo  Droid    Darth Vader  202  136.0  male  Tatooine  Human    Leia Organa  150  49.0  female  Alderaan  Human    Obi-Wan Kenobi  182  77.0  male  Stewjon  Human    Chewbacca  228  112.0  male  Kashyyyk  Wookiee    Han Solo  180  80.0  male  Corellia  Human    Yoda  66  17.0  male  NA  Yoda’s species    Boba Fett  183  78.2  male  Kamino  Human     Each row has 6 pieces of information and each column has 10 observations.\nLet’s make our own data.frame!\nFor the most part, you will be importing your data from somewhere else. We’ll cover how to import data shortly in topic #7 of “The Basics”.\n Making a data.frame has the following formatting (or syntax):\nnewDf data.frame(vector1,\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;vector2,\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;vector3) ☝️ Here we have:\nWhat we want to name our data.frame: newDf in blue The actual words data.frame in red The vectors we want included in yellow  In order to effectively create a new data.frame from multiple vectors, each vector should have the same number of items! If it doesn’t, R will ususally fill it in with the missing variable class NA.\nRemember these variables?\nids \u0026lt;- c(\u0026quot;ID1\u0026quot;, \u0026quot;ID2\u0026quot;, \u0026quot;ID3\u0026quot;, \u0026quot;ID4\u0026quot;, \u0026quot;ID5\u0026quot;) # character state \u0026lt;- c(\u0026quot;Missouri\u0026quot;, \u0026quot;Iowa\u0026quot;, \u0026quot;Missouri\u0026quot;, \u0026quot;Idaho\u0026quot;, \u0026quot;Maine\u0026quot;) # character/factor smoker \u0026lt;- c(TRUE, FALSE, FALSE, TRUE, FALSE) # logical age \u0026lt;- c(20, 18, 32, 25, 25) # numeric Let’s turn them into a data.frame.\ndemographics data.frame(ids,\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;state,\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;smoker,\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;age) Now that it’s a data.frame called demographics, it looks like this:    ids  state  smoker  age      ID1  Missouri  TRUE  20    ID2  Iowa  FALSE  18    ID3  Missouri  FALSE  32    ID4  Idaho  TRUE  25    ID5  Maine  FALSE  25     If you’re creating a new data.frame from vectors, you can easily adjust the column names.\ndemographics \u0026lt;- data.frame(SubjectID = ids, Location = state, SmokerTF = smoker, SubjectAge = age)    SubjectID  Location  SmokerTF  SubjectAge      ID1  Missouri  TRUE  20    ID2  Iowa  FALSE  18    ID3  Missouri  FALSE  32    ID4  Idaho  TRUE  25    ID5  Maine  FALSE  25     You try! Make a data.frame from the following SAT/ACT variables we’ve been working with. Call the entire data.frame scores. Include the following variables and make sure they have the following as their column names:\n Age SAT_Verbal SAT_Quant SAT_Total SAT_Scaled ACT Avg_Scores     Indexing Data.frames In our last practice session, we went over indexing a 1-dimensional vector. For data.frames, the process is very similar, but now we have to account for 2 dimensions!\nLet’s take a look back at demographics    SubjectID  Location  SmokerTF  SubjectAge      ID1  Missouri  TRUE  20    ID2  Iowa  FALSE  18    ID3  Missouri  FALSE  32    ID4  Idaho  TRUE  25    ID5  Maine  FALSE  25     What if I wanted the 4th row, 3rd column?\ndemographics[4,3] ## [1] TRUE How about the location of subjects 1 through 3?\ndemographics[1:3, 2] ## [1] \u0026quot;Missouri\u0026quot; \u0026quot;Iowa\u0026quot; \u0026quot;Missouri\u0026quot; If you want all of either rows or columns, just leave it blank. But don’t forget the comma!\n# all the columns for row 2 demographics[2,] ## SubjectID Location SmokerTF SubjectAge ## 2 ID2 Iowa FALSE 18 # all the rows of column 4 demographics[,4] ## [1] 20 18 32 25 25 Earlier in this practice, I asked you to run the line head(scores). Using head() is just a shortcut for scores[1:6,]! head(scores) is a nice way to very quickly view a data.frame (especially really big data.frames!)\nWhat if you don’t know the column number? Use the $ sign! This is really, really, REALLY helpful! Plus, autocomplete is magical.\ndemographics$Location ## [1] \u0026quot;Missouri\u0026quot; \u0026quot;Iowa\u0026quot; \u0026quot;Missouri\u0026quot; \u0026quot;Idaho\u0026quot; \u0026quot;Maine\u0026quot; You try! Let’s practice using the empire dataset. (If you’ve forgotten what it looks like, scroll to the top of this page) Follow the directions above each code chunk!\n    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cc687c99dd1c5dc071184fb2efd70413","permalink":"/practice/04-practice/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/practice/04-practice/","section":"practice","summary":"Data.frames Indexing Data.frames   Data.frames A data.frame is basically a spreadsheet. It’s 2-dimensional (rows \u0026amp; columns). Remember our starwars dataset?\n   name  height  mass  sex  homeworld  species      Luke Skywalker  172  77.","tags":null,"title":"Practice Set: Objects Revisited","type":"docs"},{"authors":null,"categories":null,"content":"  Logical Operators Functions Help Pages Examples of a few functioins   Logical Operators Logical operators are crucial for understanding any programming language, not just R. Effective use of logic allows you to perform really complex computations with ease. The more comfortable you feel in using these, the better.\nFor the time being, let’s start simple. Check out the R\u0026amp;R slides for more complicated logical operator statements.\nWhat are the operators?\n == equality != inequality (! is read as not) \u0026gt; greater than \u0026gt;= greater than or equal to \u0026lt; less than \u0026lt;= less than or equal to  Logical operators test whether a statement is TRUE or FALSE.\nLet’s revisit our demographics data.frame    SubjectID  Location  SmokerTF  SubjectAge      ID1  Missouri  TRUE  20    ID2  Iowa  FALSE  18    ID3  Missouri  FALSE  32    ID4  Idaho  TRUE  25    ID5  Maine  FALSE  25     TRUE or FALSE: Is anyone from the state of Missouri? To answer this with code, we could do:\ndemographics$Location == \u0026quot;Missouri\u0026quot; ## [1] TRUE FALSE TRUE FALSE FALSE The result is a vector of TRUE and FALSE – one for each item in demographics$Location. The 1st and 3rd elements are TRUE, so those people are from “Missouri”. The others are no.\nSpelling, capitalization, and quotation marks count!\nThese things (and missing/extra parentheses) account for at least 75% of all your errors! 🙀 If you’re evaluating a number, you do NOT need quotation marks. If it’s a character string, you do. For example:\n# no quotes around the character string demographics$Location == Missouri ## Error in eval(expr, envir, enclos): object \u0026#39;Missouri\u0026#39; not found # capitalization demographics$Location == \u0026quot;missouri\u0026quot; ## [1] FALSE FALSE FALSE FALSE FALSE ☝️ Note that this doesn’t throw and error, but everything is returned as FALSE. But we know that’s not true…\n# spelling demographics$Location == \u0026quot;Missour-uh\u0026quot; ## [1] FALSE FALSE FALSE FALSE FALSE Same as the capitalization thing.\nBe careful with = vs ==!\n == is a logical operator = is for assignment. It’s the same thing as \u0026lt;-  Look at the example below.\n Logical operator usage…\n# Is each element in the SubjectID column equal to the character # string \u0026quot;ID4\u0026quot;? demographics$SubjectID == \u0026quot;ID4\u0026quot; ## [1] FALSE FALSE FALSE TRUE FALSE Assignment usage…\n# Make each element in the SubjectID column equal to the character # string \u0026quot;ID4\u0026quot; demographics$SubjectID = \u0026quot;ID4\u0026quot; # now view the column demographics$SubjectID ## [1] \u0026quot;ID4\u0026quot; \u0026quot;ID4\u0026quot; \u0026quot;ID4\u0026quot; \u0026quot;ID4\u0026quot; \u0026quot;ID4\u0026quot; Now that we’ve gone through this demo, let’s change the SubjectID column back to what it’s supposed to look like.\ndemographics$SubjectID \u0026lt;- ids # view the column to double check demographics$SubjectID ## [1] \u0026quot;ID1\u0026quot; \u0026quot;ID2\u0026quot; \u0026quot;ID3\u0026quot; \u0026quot;ID4\u0026quot; \u0026quot;ID5\u0026quot; Quick Quiz\n   Functions Functions are the heart and soul of R, and are especially powerful. They are the verbs of a programming language because the act on the objects. Each function has:\nName that is unique Arguments - What is the verb acting on? How should the function behave? Output or the result of the function (can be anything!) that can be stored to another object  You’ve already seen some functions in action! You just didn’t know it, yet!\nc() is the combine/concatenate function:\n It’s name is c  It’s input is whatever you’re trying to combine It’s output is the vector that has the elements combined   data.frame() is the function for making a data.frame:\n It’s name is data.frame It’s input is a series of vectors that all have the same length It’s output is a nicely formatted data.frame  class() is the function for finding out the class of an object:\n It’s name is class It’s input is the object you are examining It’s output is a character telling you what class the object is  Most functions use more arguments than what we’ve seen above. And those arguments have names.\nUse the argument names!\nAutocomplete will help so it’s not so tedious. See the lecture slides for the example with the round() function. When you have multiple arguments, you separate them with a comma function(argument 1 = something, argument 2 = something else).\nYou try! Follow the directions for each chunk below to create different sequences of numbers.\n   Help Pages One of the biggest mistakes I see new coders make is that they pull up the help pages, but don’t actually read them. TAKE THE TIME TO READ THEM! There is a lot of really, really helpful information in there. And they are all organized the same way. See the lecture slides for a breakdown of the Help pages.\nYou can always look at help by typing ?functionName. For example, ?cbind will bring up the help documentation for the function cbind().\nYou try! Follow the directions below each block to ultimately create a plot of standardized variables from our empire dataset. Note that this exercise is intentionally a bit harder than previous exercises – that’s because you’re getting better!\n  FYI: In this exercise, we made a very basic scatter plot. But it’s not very pretty. We will talk a lot about making really pretty plots. You can check out the very basics in the Stats \u0026amp; Plot section, and then we’ll go into a lot more detail when we get to the Data Visualization section.\n Congratulations! You’re making great progress and are well on your way to being a bad@$% programmer!\n   Examples of a few functioins In the corresponding lecture, I listed a couple functions that you might use quite frequently. Below are examples of how to use these functions. Note that you do not need to go through all of them at this time. However, I would encourage you to come back and take a look at some point.\nlength(), nrow(), ncol()  length() is the same as getting the last element’s index position nrow() and ncol() tell you how many rows and columns there are in a data.frame, respectively  length(demographics$SubjectID) ## [1] 5 nrow(demographics) ## [1] 5 ncol(demographics) ## [1] 4 Note that these don’t work properly for any object\n# length on a 2-d object just gives the 2nd dimension (columns) # lots of people get this confused and think it should return the # number of rows! length(demographics) ## [1] 4 # nrow and ncol of a 1-d vector don\u0026#39;t make sense... # there is no such thing as columns or rows in a vector nrow(demographics$SubjectID) ## NULL ncol(demographics$SubjectID) ## NULL  factor() and as.factor() Both of these convert a character vector into a factor. Factors are a special case of character where there is inherent meaning/grouping. Categorical variables.\n(Note: For the life of me, I can’t figure out the difference between factor() and as.factor() 🤷‍♀ so you can think of them as interchangable.)\n# Our \u0026#39;Location\u0026#39; variable consists of states. We might want # to think of this as a categorical variable, where each state # is a meaingfully different category from the next state. # Don\u0026#39;t forget to re-assign the variable so that it stores your new # factor! demographics$Location \u0026lt;- factor(demographics$Location) demographics$Location ## [1] Missouri Iowa Missouri Idaho Maine ## Levels: Idaho Iowa Maine Missouri # To double check, use the `class()` function class(demographics$Location) ## [1] \u0026quot;factor\u0026quot; The LEVELS of a factor are all the different categories. Here, we have 4 states. R will always put these in alphabetical order unless you tell it otherwise (hint: you can change this by modifying one of the arguments).\n table() for quick counts Especially good for factors \u0026amp; logicals!\n# how many states are in each category? table(demographics$Location) ## ## Idaho Iowa Maine Missouri ## 1 1 1 2 # states x smoker table table(demographics$Location, demographics$SmokerTF) ## ## FALSE TRUE ## Idaho 0 1 ## Iowa 1 0 ## Maine 1 0 ## Missouri 1 1  cbind() and rbind() for adding columns and rows, respectively These are for if you have a vector that you want to add to a data.frame. You should make sure there’s the same number of items – which changes depending on if you’re adding a row or a column!\nLet’s add a column consisting of survey scores, on a scale of 1 to 10. Then we’ll add a row.\n# first, let\u0026#39;s add a column for surveys. there are currently # 5 rows/observations, so we\u0026#39;ll want 5 elements in this vector survey \u0026lt;- c(6, 4, 10, 2, 8) # now use cbind() to add it to your data.frame # the 1st argument is the data.frame # the 2nd argument is the thing you want to add to it # (you\u0026#39;re combining BOTH things) # note that we re-assign the entire data.frame demographics \u0026lt;- cbind(demographics, survey) # print it out to view demographics ## SubjectID Location SmokerTF SubjectAge survey ## 1 ID1 Missouri TRUE 20 6 ## 2 ID2 Iowa FALSE 18 4 ## 3 ID3 Missouri FALSE 32 10 ## 4 ID4 Idaho TRUE 25 2 ## 5 ID5 Maine FALSE 25 8 ############ # now let\u0026#39;s add a row. there are 5 columns, so we need to add an # element that will match up with each column newParticipant \u0026lt;- c(\u0026quot;ID6\u0026quot;, \u0026quot;Iowa\u0026quot;, FALSE, 28, 5) # now use rbind() to bind by rows # the 1st argument is the data.frame # the 2nd argument is the row you want to add to it. This makes it the LAST row # (if you switched the order, it would become the FIRST row) demographics \u0026lt;- rbind(demographics, newParticipant) # print it out to view demographics ## SubjectID Location SmokerTF SubjectAge survey ## 1 ID1 Missouri TRUE 20 6 ## 2 ID2 Iowa FALSE 18 4 ## 3 ID3 Missouri FALSE 32 10 ## 4 ID4 Idaho TRUE 25 2 ## 5 ID5 Maine FALSE 25 8 ## 6 ID6 Iowa FALSE 28 5 There is 1 slight issue with rbind(). Vectors will always take on the least specific class So newParticipant is considered a character vector because all of it’s elements could be thought of as characters, but not everything could be considered numeric or logical. This means that when we added it to the demographics data.frame, it made any column that wasn’t already a character into characters!\nclass(demographics$SubjectID) ## [1] \u0026quot;character\u0026quot; class(demographics$Location) # factors are special characters ## [1] \u0026quot;factor\u0026quot; class(demographics$SmokerTF) ## [1] \u0026quot;character\u0026quot; class(demographics$SubjectAge) ## [1] \u0026quot;character\u0026quot; class(demographics$survey) ## [1] \u0026quot;character\u0026quot; However, the last 3 columns should NOT be characters. I change them back below. See if you can figure out what each function does.\ndemographics$SmokerTF \u0026lt;- as.logical(demographics$SmokerTF) class(demographics$SmokerTF) ## [1] \u0026quot;logical\u0026quot; demographics$SubjectAge \u0026lt;- as.numeric(demographics$SubjectAge) class(demographics$SubjectAge) ## [1] \u0026quot;numeric\u0026quot; demographics$survey \u0026lt;- as.numeric(demographics$survey) class(demographics$survey) ## [1] \u0026quot;numeric\u0026quot; (Ok for real this time…The End)\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e7f5910be7d575a4e72a959c4474fefc","permalink":"/practice/05-practice/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/practice/05-practice/","section":"practice","summary":"Logical Operators Functions Help Pages Examples of a few functioins   Logical Operators Logical operators are crucial for understanding any programming language, not just R. Effective use of logic allows you to perform really complex computations with ease.","tags":null,"title":"Practice Set: Functions","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you\u0026rsquo;ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Math Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nTo render inline or block math, wrap your LaTeX math with $...$ or $$...$$, respectively.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left |\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right |^2}$$\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the \\\\\\\\ math linebreak:\n$$f(k;p_0^*) = \\begin{cases} p_0^* \u0026amp; \\text{if }k=1, \\\\\\\\ 1-p_0^* \u0026amp; \\text {if }k=0.\\end{cases}$$  renders as\n$$f(k;p_0^*) = \\begin{cases} p_0^* \u0026amp; \\text{if }k=1, \\\\\n1-p_0^* \u0026amp; \\text {if }k=0.\\end{cases}$$\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ```  renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2]  An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```  renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d  An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() }  An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ```  renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*]  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Asides Academic supports a shortcode for asides, also referred to as notices, hints, or alerts. By wrapping a paragraph in {{% alert note %}} ... {{% /alert %}}, it will render as an aside.\n{{% alert note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /alert %}}  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Icons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are some examples using the icon shortcode to render icons:\n{{\u0026lt; icon name=\u0026quot;terminal\u0026quot; pack=\u0026quot;fas\u0026quot; \u0026gt;}} Terminal {{\u0026lt; icon name=\u0026quot;python\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} Python {{\u0026lt; icon name=\u0026quot;r-project\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} R  renders as\n  Terminal\n Python\n R\nDid you find this page helpful? Consider sharing it 🙌 ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Nelson Bighetti"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Nelson Bighetti"],"categories":[],"content":"from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and JupyterLab  Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb  The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata ( front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post's title date: 2019-09-01 # Put any other Academic metadata here... ---  Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.  Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":["Nelson Bighetti","吳恩達"],"categories":["Demo","教程"],"content":"Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\n Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n 👉 Get Started 📚 View the documentation 💬 Ask a question on the forum 👥 Chat with the community 🐦 Twitter: @source_themes @GeorgeCushen #MadeWithAcademic 💡 Request a feature or report a bug ⬆️ Updating? View the Update Guide and Release Notes ❤️ Support development of Academic:  ☕️ Donate a coffee 💵 Become a backer on Patreon 🖼️ Decorate your laptop or journal with an Academic sticker 👕 Wear the T-shirt 👩‍💻 Contribute      Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.   Key features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Academic comes with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the sun/moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\n Choose a stunning theme and font for your site. Themes are fully customizable.\nEcosystem   Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site  Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n  one-click install using your web browser (recommended)  install on your computer using Git with the Command Prompt/Terminal app  install on your computer by downloading the ZIP files  install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating  View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555459200,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["Academic","开源"],"title":"Academic: the website builder for Hugo","type":"post"},{"authors":["Nelson Bighetti","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":null,"categories":["R"],"content":" R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   ","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":["Nelson Bighetti","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nTab 1        ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2a47d061b8910e9f440fafc5d0f2e6d7","permalink":"/lectures/00-testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/00-testslides/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nTab 1        ","tags":null,"title":"Downloading R","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nAbout R  RStudio Tour  Practice 1              ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0a52e4364496bbe163651eebaf21ac15","permalink":"/lectures/01-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/01-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nAbout R  RStudio Tour  Practice 1              ","tags":null,"title":"RStudio","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nObjects  Assignment  Practice 1  Practice 2  Vectors  Practice 3  Object Classes                          ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"988c2d0bd3c68393a5651547ce7285fb","permalink":"/lectures/02-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/02-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nObjects  Assignment  Practice 1  Practice 2  Vectors  Practice 3  Object Classes                          ","tags":null,"title":"Objects","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Index  Indexing for Vectors  Importance  Practice                    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"32b4b01d31f57e8de256f15e5dca25cf","permalink":"/lectures/03-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/03-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Index  Indexing for Vectors  Importance  Practice                    ","tags":null,"title":"Indexing","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Data.frame  Practice 1  Indexing DF  Finding Data  Practice 2  Matrices  Tibbles  Lists  Practice 3                                   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"91bd316812af600ed06f1968a7a64ba3","permalink":"/lectures/04-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/04-lecture/","section":"lectures","summary":"Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Data.","tags":null,"title":"Objects Part 2","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Mini Quiz  Operators  Logical Operators  Functions  Practice1  Help Pages  Practice 2                             ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"34e7bb33dbca4c0c4993b268af9eb0be","permalink":"/lectures/05-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/05-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Mini Quiz  Operators  Logical Operators  Functions  Practice1  Help Pages  Practice 2                             ","tags":null,"title":"Acting On Variables","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap        ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e026dc4268197a4cc31c1b406fe70ae1","permalink":"/lectures/06-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/06-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap        ","tags":null,"title":"Packages","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Directories  RProject  File Types  Loading Data  Practice 1                       ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"37a9d70805493d9128c0daf08c84ca46","permalink":"/lectures/07-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/07-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  Directories  RProject  File Types  Loading Data  Practice 1                       ","tags":null,"title":"Loading Files","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  MIDUS  Exercise 1  Indexing  Logical Operators  Subsetting  Exercise 2  Nesting  Exercise 3  Tidbits                                   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"21be0af9d3e62847cb2250b589869441","permalink":"/lectures/08-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/08-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap  MIDUS  Exercise 1  Indexing  Logical Operators  Subsetting  Exercise 2  Nesting  Exercise 3  Tidbits                                   ","tags":null,"title":"Review \u0026 Random","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap        ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a8edce8c6c6cec6370fe4f9fe02c68fc","permalink":"/lectures/09-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/09-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap        ","tags":null,"title":"Basic Statistics \u0026 Plotting","type":"docs"},{"authors":null,"categories":null,"content":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap        ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"77448fcd81b2de15494fd62d06bd927b","permalink":"/lectures/100-lecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/lectures/100-lecture/","section":"lectures","summary":"  Videos Slides   Videos Eventually, a YouTube playlist will go here.\n Slides  View all slides in new window  Download PDF of all slides\nRecap        ","tags":null,"title":"TEST","type":"docs"}]